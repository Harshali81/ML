# Required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler  # Importing StandardScaler

emails_df = pd.read_csv("C:\\Users\\Harshali\\Downloads\\email.csv")

emails_df

# Separate features and target
 X = emails_df.drop(columns=['Email No.', 'Prediction'])  # Features
 y = emails_df['Prediction']  # Target

# Ensure all feature values are numeric (convert to float if needed)
 X = X.astype(float)

# Standardizing the features for better performance (especially for SVM)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 1. K-Nearest Neighbors (KNN) classification
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

# Performance of KNN
print("KNN Classification Report:")
print(classification_report(y_test, y_pred_knn))
print(f"KNN Accuracy: {accuracy_score(y_test, y_pred_knn)}\n")

 # 2. Support Vector Machine (SVM) classification
svm = SVC(kernel='linear')  # Linear kernel for binary classification
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

 # Performance of SVM
print("SVM Classification Report:")
print(classification_report(y_test, y_pred_svm))
print(f"SVM Accuracy: {accuracy_score(y_test, y_pred_svm)}")
